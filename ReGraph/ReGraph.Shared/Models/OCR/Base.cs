using System;
using System.Collections.Generic;
using System.Text;

namespace ReGraph.Models.OCR
{
    class Base
    {

        public static string[] names = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o",
                                    "p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
                                    "P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0"};

        public static double[] heightToWidth = { 1.25, 1.5, 1.42857142857143, 1.5, 1.25, 1.875, 1.55555555555556, 1.5, 3.75, 4, 1.36363636363636,
                                                   3.75, 0.625, 0.909090909090909, 1.11111111111111, 1.4, 1.4, 1.42857142857143, 1.42857142857143,
                                                   2, 1, 1, 0.666666666666667, 1, 1.5, 1.25, 0.933333333333333, 1.07692307692308, 1.16666666666667,
                                                   0.933333333333333, 1.16666666666667, 1.27272727272727, 1, 0.933333333333333, 2.8, 2, 0.933333333333333,
                                                   1.16666666666667, 0.736842105263158, 0.933333333333333, 1, 1.27272727272727, 1.28571428571429, 1, 1.4,
                                                   1.27272727272727, 0.933333333333333, 0.933333333333333, 0.7, 0.933333333333333, 1, 1.16666666666667, 2.8,
                                                   1.75, 1.75, 1.55555555555556, 1.75, 1.55555555555556, 1.55555555555556, 1.75, 1.55555555555556,
                                                   1.55555555555556 };

        public static double[,] blackToAll = {{0.4375,0.5625,0.5,0.4375},{0.32,0,0.3,0.32},{0.555555555555556,0.5,0.666666666666667,0.555555555555556},{0,0.44,0.42,0},
                                             {0.5,0.625,0.541666666666667,0.5},{0.1875,0.375,0.431818181818182,0.1875},{0.4375,0.45,0.5,0.4375},
                                             {0.48,0,0.48,0.48},{0.5,0.5,0.461538461538462,0.5},{0,0.666666666666667,0.0833333333333333,0},
                                             {0.48,0,0.5,0.48},{0.75,0.5,0.538461538461538,0.75},{0.375,0.421875,0.625,0.375},{0.4,0.366666666666667,0.4,0.4},
                                             {0.5,0.45,0.5,0.5},{0.4,0.44,0.355555555555556,0.4},{0.44,0.44,0.244444444444444,0.44},{0.555555555555556,0.583333333333333,0.428571428571429,0.555555555555556}
                                             ,{0.444444444444444,0.5,0.571428571428571,0.444444444444444},{0.666666666666667,0.333333333333333,0.333333333333333,0.666666666666667}
                                             ,{0.28,0.44,0.28,0.28},{0.56,0.24,0.16,0.56},{0.387755102040816,0.428571428571429,0.19047619047619,0.387755102040816},{0.48,0.28,0.32,0.48},{0.52,0.32,0.24,0.52}
                                             ,{0.3125,0.625,0.541666666666667,0.3125},{0.122448979591837,0.232142857142857,0.26530612244898,0.122448979591837},{0.444444444444444,0.333333333333333,0.458333333333333,0.444444444444444}
                                             ,{0.388888888888889,0.305555555555556,0.375,0.388888888888889},{0.387755102040816,0.339285714285714,0.387755102040816,0.387755102040816}
                                             ,{0.444444444444444,0.194444444444444,0.458333333333333,0.444444444444444},{0.52,0.266666666666667,0.488888888888889,0.52}
                                             ,{0.326530612244898,0.285714285714286,0.36734693877551,0.326530612244898},{0.448979591836735,0.392857142857143,0.387755102040816,0.448979591836735}
                                             ,{0.5,0.666666666666667,0.0833333333333333,0.5},{0.222222222222222,0.666666666666667,0.181818181818182,0.222222222222222},{0.448979591836735,0.214285714285714,0.448979591836735,0.448979591836735}
                                             ,{0.444444444444444,0,0.416666666666667,0.444444444444444},{0.37037037037037,0.322222222222222,0.333333333333333,0.37037037037037},{0.408163265306122,0.25,0.224489795918367,0.408163265306122}
                                             ,{0.326530612244898,0.306122448979592,0.346938775510204,0.326530612244898},{0.52,0.466666666666667,0.488888888888889,0.52},{0.326530612244898,0.326530612244898,0.246753246753247,0.326530612244898}
                                             ,{0.448979591836735,0.285714285714286,0.387755102040816,0.448979591836735},{0.4,0.32,0.288888888888889,0.4},{0.24,0.366666666666667,0.0666666666666667,0.24}
                                             ,{0.36734693877551,0.196428571428571,0.306122448979592,0.36734693877551},{0.408163265306122,0.196428571428571,0.122448979591837,0.408163265306122},{0.37,0.3,0.2,0.37}
                                             ,{0.408163265306122,0.25,0.224489795918367,0.408163265306122},{0.408163265306122,0.224489795918367,0.204081632653061,0.408163265306122}
                                             ,{0.138888888888889,0.472222222222222,0.395833333333333,0.138888888888889},{0.75,0.333333333333333,0.0833333333333333,0.75},{0.375,0.625,0.225,0.375}
                                             ,{0.25,0.375,0.2,0.25},{0.0625,0.45,0.2,0.0625},{0.4375,0.4375,0.225,0.4375},{0.1875,0.25,0.525,0.1875},{0.4375,0.55,0.025,0.4375},{0.375,0.375,0.45,0.375}
                                             ,{0.5,0.35,0.35,0.5},{0.3125,0.3,0.45,0.3125}};




        public static List<double> HeightToWidth(List<List<bool[,]>> images)
        {

            List<double> result = new List<double>();

            for (int i = 0; i < images.Count; ++i)
            {
                for (int j = 0; j < images[i].Count; ++j)
                {
                    bool[,] b = Utility.FitImageToShape((images[i])[j]);
                    double temp = (double)b.GetLength(1) / (double)b.GetLength(0);
                    result.Add(temp);
                }
            }

            return result;
        }


        public static List<double[]> BlackToAll(List<List<bool[,]>> images)
        {
            List<double[]> result = new List<double[]>();

            for (int i = 0; i < images.Count; ++i)
            {
                for (int j = 0; j < images[i].Count; ++j)
                {
                    bool[,] b = Utility.FitImageToShape((images[i])[j]);    
                    result.Add(calculateTheRatio(b));
                }
            }

            return result;

        }

        private static double[] calculateTheRatio(bool[,] image)
        {
            double[] result = new double[4];

            int mid_x = image.GetLength(0) / 2;
            int mid_y = image.GetLength(0) / 2;

            int black = 0, all = 0;

            for (int i = 0; i < mid_x; ++i)
            {
                for (int j = 0; j < mid_y; ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[0] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = mid_x; i < image.GetLength(0); ++i)
            {
                for (int j = 0; j < mid_y; ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[1] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = 0; i < mid_x; ++i)
            {
                for (int j = mid_y; j < image.GetLength(1); ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[2] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = mid_x; i < image.GetLength(0); ++i)
            {
                for (int j = mid_y; j < image.GetLength(1); ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[3] = (double)black / (double)all;


            return result;

        }


    }
}
