using System;
using System.Collections.Generic;
using System.Text;

namespace ReGraph.Models.OCR
{
    class Base
    {

        public static string[] names = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o",
                                    "p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O",
                                    "P","Q","R","S","T","U","V","W","X","Y","Z","1","2","3","4","5","6","7","8","9","0"};

        public static double[] heightToWidth = { 1.25, 1.5, 1.42857142857143, 1.5, 1.25, 1.875, 1.55555555555556, 1.5, 3.75, 4, 1.36363636363636,
                                                   3.75, 0.625, 0.909090909090909, 1.11111111111111, 1.4, 1.4, 1.42857142857143, 1.42857142857143,
                                                   2, 1, 1, 0.666666666666667, 1, 1.5, 1.25, 0.933333333333333, 1.07692307692308, 1.16666666666667,
                                                   0.933333333333333, 1.16666666666667, 1.27272727272727, 1, 0.933333333333333, 2.8, 2, 0.933333333333333,
                                                   1.16666666666667, 0.736842105263158, 0.933333333333333, 1, 1.27272727272727, 1.28571428571429, 1, 1.4,
                                                   1.27272727272727, 0.933333333333333, 0.933333333333333, 0.7, 0.933333333333333, 1, 1.16666666666667, 2.8,
                                                   1.75, 1.75, 1.55555555555556, 1.75, 1.55555555555556, 1.55555555555556, 1.75, 1.55555555555556,
                                                   1.55555555555556 };

        public static double[,] blackToAll = { { 0.45, 0.55, 0.5, 0.45 }, { 0.342857142857143, 0.142857142857143, 0.275, 0.342857142857143 }, { 0.6, 0.3, 0.666666666666667, 0.6 }
                                                 , { 0.142857142857143, 0.457142857142857, 0.4, 0.142857142857143 }, { 0.45, 0.5, 0.6, 0.45 },
                                                 { 0.321428571428571, 0.285714285714286, 0.40625, 0.321428571428571 }, { 0.428571428571429, 0.428571428571429, 0.535714285714286, 0.428571428571429 },
                                                 { 0.485714285714286, 0.142857142857143, 0.475, 0.485714285714286 }, { 0.357142857142857, 0.285714285714286, 0.5625, 0.357142857142857 }, { 0, 0.5, 0.15, 0 },
                                                 { 0.457142857142857, 0.119047619047619, 0.525, 0.457142857142857 }, { 0.571428571428571, 0.5, 0.5625, 0.571428571428571 }, { 0.45, 0.45, 0.4, 0.45 },
                                                 { 0.4, 0.366666666666667, 0.4, 0.4 }, { 0.5, 0.44, 0.5, 0.5 }, { 0.342857142857143, 0.428571428571429, 0.4, 0.342857142857143 },
                                                 { 0.428571428571429, 0.428571428571429, 0.2, 0.428571428571429 }, { 0.466666666666667, 0.45, 0.466666666666667, 0.466666666666667 },
                                                 { 0.6, 0.4, 0.466666666666667, 0.6 }, { 0.5, 0.166666666666667, 0.333333333333333, 0.5 }, { 0.28, 0.44, 0.28, 0.28 }, { 0.56, 0.24, 0.16, 0.56 },
                                                 { 0.371428571428571, 0.475, 0.285714285714286, 0.371428571428571 }, { 0.48, 0.28, 0.32, 0.48 }, { 0.457142857142857, 0.342857142857143, 0.225, 0.457142857142857 },
                                                 { 0.3, 0.55, 0.6, 0.3 }, { 0.122448979591837, 0.232142857142857, 0.26530612244898, 0.122448979591837 }, { 0.476190476190476, 0.36734693877551, 0.428571428571429, 0.476190476190476 },
                                                 { 0.380952380952381, 0.261904761904762, 0.380952380952381, 0.380952380952381 }, { 0.387755102040816, 0.339285714285714, 0.387755102040816, 0.387755102040816 },
                                                 { 0.476190476190476, 0.261904761904762, 0.428571428571429, 0.476190476190476 }, { 0.514285714285714, 0.30952380952381, 0.485714285714286, 0.514285714285714 },
                                                 { 0.326530612244898, 0.285714285714286, 0.36734693877551, 0.326530612244898 }, { 0.448979591836735, 0.392857142857143, 0.387755102040816, 0.448979591836735 },
                                                 { 0.142857142857143, 0.428571428571429, 0.142857142857143, 0.142857142857143 }, { 0.0952380952380952, 0.571428571428571, 0.285714285714286, 0.0952380952380952 },
                                                 { 0.448979591836735, 0.214285714285714, 0.448979591836735, 0.448979591836735 }, { 0.428571428571429, 0, 0.428571428571429, 0.428571428571429 },
                                                 { 0.380952380952381, 0.328571428571429, 0.333333333333333, 0.380952380952381 }, { 0.408163265306122, 0.25, 0.224489795918367, 0.408163265306122 },
                                                 { 0.326530612244898, 0.306122448979592, 0.346938775510204, 0.326530612244898 }, { 0.485714285714286, 0.476190476190476, 0.514285714285714, 0.485714285714286 },
                                                 { 0.317460317460317, 0.333333333333333, 0.238095238095238, 0.317460317460317 }, { 0.448979591836735, 0.285714285714286, 0.387755102040816, 0.448979591836735 },
                                                 { 0.485714285714286, 0.257142857142857, 0.171428571428571, 0.485714285714286 }, { 0.171428571428571, 0.30952380952381, 0.0857142857142857, 0.171428571428571 },
                                                 { 0.36734693877551, 0.196428571428571, 0.306122448979592, 0.36734693877551 }, { 0.408163265306122, 0.196428571428571, 0.122448979591837, 0.408163265306122 },
                                                 { 0.4, 0.3, 0.242857142857143, 0.4 }, { 0.408163265306122, 0.25, 0.224489795918367, 0.408163265306122 }, { 0.408163265306122, 0.224489795918367, 0.204081632653061, 0.408163265306122 },
                                                 { 0.142857142857143, 0.452380952380952, 0.428571428571429, 0.142857142857143 }, { 0.214285714285714, 0.333333333333333, 0.142857142857143, 0.214285714285714 }, { 0.214285714285714, 0.5, 0.321428571428571, 0.214285714285714 },
                                                 { 0.214285714285714, 0.357142857142857, 0.214285714285714, 0.214285714285714 }, { 0.142857142857143, 0.428571428571429, 0.178571428571429, 0.142857142857143 }, { 0.392857142857143, 0.5, 0.178571428571429, 0.392857142857143 },
                                                 { 0.392857142857143, 0.285714285714286, 0.464285714285714, 0.392857142857143 }, { 0.25, 0.4, 0.0357142857142857, 0.25 }, { 0.464285714285714, 0.392857142857143, 0.392857142857143, 0.464285714285714 },
                                                 { 0.5, 0.371428571428571, 0.285714285714286, 0.5 }, { 0.392857142857143, 0.314285714285714, 0.428571428571429, 0.392857142857143 } };




        public static List<double> HeightToWidth(List<List<bool[,]>> images)
        {

            List<double> result = new List<double>();

            for (int i = 0; i < images.Count; ++i)
            {
                for (int j = 0; j < images[i].Count; ++j)
                {
                    bool[,] b = Utility.FitImageToShape((images[i])[j]);
                    double temp = (double)b.GetLength(1) / (double)b.GetLength(0);
                    result.Add(temp);
                }
            }

            return result;
        }


        public static List<double[]> BlackToAll(List<List<bool[,]>> images)
        {
            List<double[]> result = new List<double[]>();

            for (int i = 0; i < images.Count; ++i)
            {
                for (int j = 0; j < images[i].Count; ++j)
                {
                    bool[,] b = Utility.FitImageToShape((images[i])[j]);    
                    result.Add(calculateTheRatio(b));
                }
            }

            return result;

        }

        private static double[] calculateTheRatio(bool[,] image)
        {
            double[] result = new double[4];

            int mid_x = image.GetLength(0) / 2;
            int mid_y = image.GetLength(1) / 2;

            int black = 0, all = 0;

            for (int i = 0; i < mid_x; ++i)
            {
                for (int j = 0; j < mid_y; ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[0] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = mid_x; i < image.GetLength(0); ++i)
            {
                for (int j = 0; j < mid_y; ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[1] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = 0; i < mid_x; ++i)
            {
                for (int j = mid_y; j < image.GetLength(1); ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[2] = (double)black / (double)all;


            black = 0;
            all = 0;
            for (int i = mid_x; i < image.GetLength(0); ++i)
            {
                for (int j = mid_y; j < image.GetLength(1); ++j)
                {
                    ++all;
                    if (image[i, j] == false) ++black;
                }
            }
            result[3] = (double)black / (double)all;


            return result;

        }

        public static string CompareWithBase(List<double> htw, List<double[]> bta, List<int> spaces)
        {
            string result = "";

            int to_spaces = 0;

            for (int i = 0; i < htw.Count; ++i)
            {

                int index_of_letter = 0;
                double dev = 0.0;
                while (true)
                {
                    List<int> index = new List<int>();
                    

                    for (int j = 0; j < Base.heightToWidth.GetLength(0); ++j)
                    {
                        if (htw[i] >= (Base.heightToWidth[j] - dev) && htw[i] <= (Base.heightToWidth[j] + dev)) index.Add(j);
                    }

                    if (index.Count == 0) dev += 0.05;

                    if (index.Count == 1)
                    {
                        int counter2 = 0;
                        for (int k = 0; k < 4; ++k)
                        {
                            if ((bta[i])[k] >= (Base.blackToAll[index[0],k] - 0.2) && (bta[i])[k] <= (Base.blackToAll[index[0],k] + 0.2)) counter2++;
                        }
                        if (counter2 >= 3)  // TUTAJ ZMIENCI NA 2
                        {
                            index_of_letter = i;
                            break;
                        }
                        else dev += 0.05;
                    }

                    if (index.Count > 1)
                    {
                        double dev2 = 0;
                        while (true)
                        {
                            int[] counter3 = new int[index.Count];

                            for (int j = 0; j < counter3.GetLength(0); ++j)
                            {
                                counter3[j] = 0;
                            }

                            for (int j = 0; j < index.Count; ++j)
                            {
                                for (int k = 0; k < 4; ++k)
                                {
                                    if ((bta[i])[k] >= (Base.blackToAll[index[j], k] - dev2) && (bta[i])[k] <= (Base.blackToAll[index[j], k] + dev2)) counter3[j]++;
                                }
                            }
                            bool check = true;
                            for (int j = 0; j < counter3.GetLength(0); ++j)
                            {
                                if (counter3[j] >= 3)
                                {
                                    index_of_letter = index[j];
                                    check = false;
                                }
                            }
                            if (check) dev2 += 0.05;
                            else break;
                        }
                        break;
                    }

                }

                result += Base.names[index_of_letter];
                for (int j = to_spaces; j < spaces.Count; ++j)
                {
                    if (i == spaces[j]) result += " ";
                }

            }

            return result;

        }


    }
}
